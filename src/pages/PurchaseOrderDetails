import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getDoc, doc } from 'firebase/firestore';
import './css/PurchaseOrderDetails.css';
import { db } from '../firebase'; 
import Navbar from "../components/Navbar";

function PurchaseOrderDetails() {
    const { id } = useParams();
    const [purchaseOrderData, setPurchaseOrderData] = useState(null);
    const [productPOData, setProductPOData] = useState(null);
    const [quotationData, setQuotationData] = useState(null);
    const [menuActive, setMenuActive] = useState(true);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
  
    useEffect(() => {
        const fetchPurchaseOrderData = async () => {
            try {
                const purchaseOrderDocRef = doc(db, 'po', id);
                const purchaseOrderDocSnapshot = await getDoc(purchaseOrderDocRef);
  
            if (!purchaseOrderDocSnapshot.exists()) {
          throw new Error('Purchase Order document does not exist');
        }
  
        const purchaseOrderData = purchaseOrderDocSnapshot.data();
        setPurchaseOrderData(purchaseOrderData);

        // Fetch productPO data
        const productPORef = purchaseOrderData.productPO;
        const productPODocSnapshot = await getDoc(productPORef);
        if (!productPODocSnapshot.exists()) {
          throw new Error('Product PO document does not exist');
        }
        const productPOData = productPODocSnapshot.data();
        setProductPOData(productPOData);

        // Fetch quotation data
        const quotationRef = productPOData.quotationNo;
        const quotationDocSnapshot = await getDoc(quotationRef);
        if (!quotationDocSnapshot.exists()) {
          throw new Error('Quotation document does not exist');
        }
        const quotationData = { id: quotationRef.id, ...quotationDocSnapshot.data() };
        setQuotationData(quotationData);

        setLoading(false);
      } catch (error) {
        console.error('Error fetching data: ', error);
        setError(error);
        setLoading(false);
      }
    };
  
    fetchPurchaseOrderData();
  }, [id]);
  return (
    <div className="main-content">
      <div className={`container ${menuActive ? 'menu-inactive' : 'menu-active'}`}>
        <Navbar setMenuActive={setMenuActive} menuActive={menuActive} />
      {loading ? (
        <div>Loading...</div>
      ) : error ? (
        <div>Error: {error.message}</div>
      ) : purchaseOrderData ? (
        <>
          <div className="header">
            <h1>Purchase Order - {purchaseOrderData.id}</h1>
          </div>
          <div className="purchase-order-details">
            <h2>Purchase Order No. {purchaseOrderData.id}</h2>
            <p>------------------------------------------------------------------------------------------------------------------------------------------------------</p>
            <p>
              <strong className="custom-color">Expired Date:</strong> &nbsp;&nbsp;&nbsp;<span className="custom-colors">{purchaseOrderData.expiredDate}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;
              <strong className="custom-color">Issued Date:</strong> &nbsp;&nbsp;&nbsp;<span className="custom-colors">{purchaseOrderData.issuedDate}</span><br />
            </p>
            <p>------------------------------------------------------------------------------------------------------------------------------------------------------</p>
            {/* Add more details here based on your Purchase Order structure */}
          </div>
        </>
      ) : (
        <div>Purchase Order not found.</div>
      )}
    </div>
    </div>
  );
}

export default PurchaseOrderDetails;
